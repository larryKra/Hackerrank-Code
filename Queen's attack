#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;
int min(int a, int b)
{
	return ((a <= b) ? a : b);
}
void attackposition(int n,int x,int y,int matrix[3][3])
{

	matrix[1][1] = 0;
    matrix[0][1] = x-1;
	matrix[1][0] = y - 1;
	matrix[2][1] = n-x;
	matrix[1][2] = n - y;
	//diagonals
	matrix[0][0] = min(matrix[0][1],matrix[1][0]);
	matrix[2][0] = min(matrix[1][0], matrix[2][1]);
	matrix[2][2] = min(matrix[2][1], matrix[1][2]);
	matrix[0][2] = min(matrix[0][1], matrix[1][2]);
}

int main() {
	int n;
	int k;
	cin >> n >> k;
	int matrix[3][3];
	int rQueen;
	int cQueen;
	cin >> rQueen >> cQueen;
	attackposition(n, cQueen, rQueen, matrix);
	for (int a0 = 0; a0 < k; a0++) {
		int rObstacle;
		int cObstacle;
		cin >> rObstacle >> cObstacle;
		// your code goes here
		if (rObstacle == rQueen || cObstacle == cQueen) //if in the same row or the same column
		{
			if (rObstacle == rQueen)   //in the same row
			{
				if (cObstacle > cQueen)
					matrix[2][1] = min(matrix[2][1], cObstacle - cQueen - 1);
				else
					matrix[0][1] = min(matrix[0][1], cQueen - cObstacle - 1);

			}
			else   //in the same column
			{
				if (rObstacle > rQueen)
					matrix[1][2] = min(matrix[1][2], rObstacle - rQueen-1 );
				else
					matrix[1][0] = min(matrix[1][0], rQueen - rObstacle - 1);


			}
		}
		else if (abs(cObstacle - cQueen) == abs(rObstacle - rQueen))
		{
			if (cObstacle > cQueen)
			{

				if (rObstacle > rQueen)
					matrix[2][2] = min(matrix[2][2], abs(cObstacle - cQueen)-1);
				else
					matrix[2][0] = min(matrix[2][0], abs(cQueen - cObstacle)-1);
			}
			else
			{
				if (rObstacle > rQueen)
					matrix[0][2] = min(matrix[0][2], abs(cObstacle - cQueen)-1);
				else
					matrix[0][0] = min(matrix[0][0], abs(cQueen - cObstacle) - 1);
			}


		}
	}
	int sum = 0;
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
			sum += matrix[i][j];
	cout << sum << endl;
	system("pause");
	return 0;
}

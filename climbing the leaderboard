#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include<cstdio>
using namespace std;


int main() {
	int n;
	cin >> n;
	int rank = 1;
	vector<int>scores(n);
	cin >> scores[0];
	vector<int> temp(n);
	int inp;
	int k = 1;
	for (int scores_i = 1; scores_i < n; scores_i++) {
		cin >> inp;
		if (inp != scores[k - 1])
		{
			scores[k] = inp;
			++k;
		}
		else temp.push_back(inp);
		
	}
	int m;
	cin >> m;
	vector<int> alice(m);
	for (int alice_i = 0; alice_i < m; alice_i++) {
		cin >> alice[alice_i];
	}
	// your code goes here
	int start = 0;
	for (int i = 0; i < scores.size(); ++i)
	{
		if (scores[i] != 0)    //start-1 is the end of positive elements.
			++start;
		else break;
	}
	if (start == 1)
	{
		int position = 2;
		int k = 0;
		while (k < m)
		{
			if (scores[0] >= alice[k]) {
				position = 1 + (scores[0] > alice[k]);
				k++;
				cout << position << endl;
			}
			else
			{
				position = 1;
				k++;
				cout << position << endl;
			}
		}
		
	}
	else {
		int position = start;
		for (int i = start - 1, j = 0; i - 1 >= 0 && j < m;)
		{
			if (scores[i] >= alice[j]) {
				position = start + (scores[i] > alice[j]);
				++j;
				cout << position << endl;
			}
			else if (scores[i] < alice[j] && scores[i - 1] < alice[j])
			{
				if (i != 1)
					--i;
				else if (i == 1)
				{
					if (scores[0] < alice[j])
					{
						position = 1;

						cout << position << endl;
						++j;
					}
				}
			}
			else if (scores[i] < alice[j] && scores[i - 1] >= alice[j])
			{
				position = i + (scores[i - 1] > alice[j]);
				++j;
				cout << position << endl;
			}
			else if (i == 1 && alice[j] > scores[0])
			{
				position = 1;
				if (j < m - 1)++j;
				cout << position << endl;
			}


		}
	}
	system("pause");
	return 0;
}
